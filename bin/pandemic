#!/usr/bin/env python

import argparse
import os
import sys
from configparser import ConfigParser
from functools import partial

from Pandemic.bundle import Bundle
from Pandemic.bundle import actioners
from Pandemic import printer

path_to_default_config = "~/.vim/pandemic-bundles"
path_to_bundles = "~/.vim/bundle"


class Pandemic:
    bundles = {}

    def __init__(self, actionstr, config, path_to_bundles):

        self.path_to_bundles = os.path.expanduser(path_to_bundles)

        if not os.path.exists(self.path_to_bundles):
            os.mkdir(self.path_to_bundles)

        self.config = os.path.expanduser(config)

        if len(actionstr):
            action_args = actionstr[1:]

            actions = {
                "list": self.list,
                "add": self.add,
                "remove": self.remove,
                "update": self.update,
                "list-dead": self.listdead,
            }

            if actionstr[0] not in actions:
                printer.error("Invalid action.")

            self.action = actions[actionstr[0]]

            self.parse_config()
            self.action(action_args)
        else:
            printer.error("No action specified.")
            sys.exit(1)

    def parse_config(self):
        config_parser = ConfigParser()
        config_parser.read(self.config)

        self.bundles = {}

        for bundle in config_parser.sections():
            optioned = partial(config_parser.has_option, bundle)
            if not optioned("source") or not optioned("type"):
                printer.error("Bundle '%s' is malformed." % bundle)
                continue

            # append bundle to bundle list
            self.__append_to_bundles(
                bundle, config_parser.get(bundle, "source"), config_parser.get(bundle, "type")
            )

    def save_config(self):
        config_parser = ConfigParser()
        for b in sorted(self.bundles.keys()):
            bundle = self.bundles[b]
            config_parser.add_section(b)
            config_parser.set(b, "source", bundle.source)
            config_parser.set(b, "type", bundle.type)

        f = open(self.config, "w")
        config_parser.write(f)
        f.close()

    def list(self, args):
        for name, bundle in sorted(self.bundles.items()):
            bundle = self.bundles[name]
            prefix = "en" if name == bundle.bname else "dis"
            printer.info(
                f"{name}: {prefix}abled {bundle.type} {bundle.source}")

    def add(self, args):
        bundle, type_, source = args

        # add the new bundle to the list
        self.__append_to_bundles(bundle, source, type_)
        # get the new bundle to the directory
        self.bundles[bundle].clone()
        # save the new bundle list
        self.save_config()

    def remove(self, args):
        if len(args) > 1 and args[0] == "-k":
            printer.warn("Keeping bundle '%s'... this is a bad idea." % bundle)
            keep = True
            bundles = args[1:]
        else:
            keep = False
            bundles = args

        for bundle in bundles:
            if not keep:
                self.bundles[bundle].remove()

            self.__delete_from_bundles(bundle)

        self.save_config()

    def update(self, args):
        bundles = args if args else self.bundles.keys()
        for bundle in bundles:
            printer.info("Updating %s..." % bundle)
            self.bundles[bundle].update()

    def listdead(self, args):
        # list bundles that are no longer in the config
        found_bundles = os.listdir(self.path_to_bundles)

        for bundle in found_bundles:
            if bundle not in self.bundles:
                printer.warn("Bundle %s not found in database." % bundle)

        for bundle in self.bundles:
            if bundle not in found_bundles:
                printer.warn(
                    "Bundle %s not found on filesystem.  Run pandemic update." % bundle
                )

    def __append_to_bundles(self, bundle, source, type_):
        self.bundles[bundle] = Bundle(
            bundle, source, type_, self.path_to_bundles
        )

    def __delete_from_bundles(self, bundle):
        del self.bundles[bundle]


def parse_args():
    p = argparse.ArgumentParser(description="Manage vim-pathogen bundles.")
    p.add_argument(
        "-c",
        "--config",
        dest="config",
        action="store",
        default=path_to_default_config,
        help="remote bundle configuration file",
    )
    p.add_argument(
        "-b",
        "--bundle-directory",
        dest="path_to_bundles",
        action="store",
        default=path_to_bundles,
        help="directory contaning pandemic-managed bundles",
    )
    p.add_argument(
        "-t",
        "--show-types",
        dest="showtypes",
        action="store_true",
        default=False,
        help="show supported source types",
    )
    p.add_argument(
        dest="action",
        action="store",
        nargs="*",
        help="action (list, add BUNDLE TYPE SOURCE, remove BUNDLE, update [BUNDLE, BUNDLE, ...], list-dead)",
    )
    return p.parse_args()


def main():
    args = parse_args()
    if args.showtypes:
        printer.info("Supported types: %s" % " ".join(actioners.keys()))
    pan = Pandemic(args.action, args.config, args.path_to_bundles)
    return os.EX_OK


if __name__ == "__main__":
    sys.exit(main())
